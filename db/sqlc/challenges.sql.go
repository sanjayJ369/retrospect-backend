// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: challenges.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createChallenge = `-- name: CreateChallenge :one
INSERT INTO challenges (
  title, user_id, description, end_date
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, title, user_id, description, start_date, end_date, active, created_at
`

type CreateChallengeParams struct {
	Title       string         `json:"title"`
	UserID      uuid.UUID      `json:"user_id"`
	Description sql.NullString `json:"description"`
	EndDate     sql.NullTime   `json:"end_date"`
}

func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, createChallenge,
		arg.Title,
		arg.UserID,
		arg.Description,
		arg.EndDate,
	)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChallenge = `-- name: DeleteChallenge :one
DELETE FROM challenges
WHERE id = $1
RETURNING id, title, user_id, description, start_date, end_date, active, created_at
`

func (q *Queries) DeleteChallenge(ctx context.Context, id uuid.UUID) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, deleteChallenge, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const getChallenge = `-- name: GetChallenge :one
SELECT id, title, user_id, description, start_date, end_date, active, created_at FROM challenges
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChallenge(ctx context.Context, id uuid.UUID) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, getChallenge, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const listChallenges = `-- name: ListChallenges :many
SELECT id, title, user_id, description, start_date, end_date, active, created_at FROM challenges
ORDER BY start_date
LIMIT $1
OFFSET $2
`

type ListChallengesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListChallenges(ctx context.Context, arg ListChallengesParams) ([]Challenge, error) {
	rows, err := q.db.QueryContext(ctx, listChallenges, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Challenge
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChallengeActiveStatus = `-- name: UpdateChallengeActiveStatus :one
UPDATE challenges
SET
  active = $2
WHERE
  id = $1
RETURNING id, title, user_id, description, start_date, end_date, active, created_at
`

type UpdateChallengeActiveStatusParams struct {
	ID     uuid.UUID    `json:"id"`
	Active sql.NullBool `json:"active"`
}

func (q *Queries) UpdateChallengeActiveStatus(ctx context.Context, arg UpdateChallengeActiveStatusParams) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, updateChallengeActiveStatus, arg.ID, arg.Active)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const updateChallengeDescription = `-- name: UpdateChallengeDescription :one
UPDATE challenges
SET
  description = $2
WHERE
  id = $1
RETURNING id, title, user_id, description, start_date, end_date, active, created_at
`

type UpdateChallengeDescriptionParams struct {
	ID          uuid.UUID      `json:"id"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateChallengeDescription(ctx context.Context, arg UpdateChallengeDescriptionParams) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, updateChallengeDescription, arg.ID, arg.Description)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const updateChallengeDetails = `-- name: UpdateChallengeDetails :one
UPDATE challenges
SET
  title = $2,
  description = $3,
  end_date = $4
WHERE
  id = $1
RETURNING id, title, user_id, description, start_date, end_date, active, created_at
`

type UpdateChallengeDetailsParams struct {
	ID          uuid.UUID      `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	EndDate     sql.NullTime   `json:"end_date"`
}

// This query updates multiple common fields together
func (q *Queries) UpdateChallengeDetails(ctx context.Context, arg UpdateChallengeDetailsParams) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, updateChallengeDetails,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.EndDate,
	)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const updateChallengeEndDate = `-- name: UpdateChallengeEndDate :one
UPDATE challenges
SET
  end_date = $2
WHERE
  id = $1
RETURNING id, title, user_id, description, start_date, end_date, active, created_at
`

type UpdateChallengeEndDateParams struct {
	ID      uuid.UUID    `json:"id"`
	EndDate sql.NullTime `json:"end_date"`
}

func (q *Queries) UpdateChallengeEndDate(ctx context.Context, arg UpdateChallengeEndDateParams) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, updateChallengeEndDate, arg.ID, arg.EndDate)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const updateChallengeTitle = `-- name: UpdateChallengeTitle :one
UPDATE challenges
SET
  title = $2
WHERE
  id = $1
RETURNING id, title, user_id, description, start_date, end_date, active, created_at
`

type UpdateChallengeTitleParams struct {
	ID    uuid.UUID `json:"id"`
	Title string    `json:"title"`
}

func (q *Queries) UpdateChallengeTitle(ctx context.Context, arg UpdateChallengeTitleParams) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, updateChallengeTitle, arg.ID, arg.Title)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}
