// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: challenges.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChallenge = `-- name: CreateChallenge :one
INSERT INTO challenges (
  title, user_id, description, end_date, duration
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, user_id, description, start_date, end_date, duration, active, created_at
`

type CreateChallengeParams struct {
	Title       string      `json:"title"`
	UserID      pgtype.UUID `json:"user_id"`
	Description pgtype.Text `json:"description"`
	EndDate     pgtype.Date `json:"end_date"`
	Duration    pgtype.Int4 `json:"duration"`
}

func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) (Challenge, error) {
	row := q.db.QueryRow(ctx, createChallenge,
		arg.Title,
		arg.UserID,
		arg.Description,
		arg.EndDate,
		arg.Duration,
	)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Duration,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChallenge = `-- name: DeleteChallenge :one
DELETE FROM users
WHERE id = $1
RETURNING id, email, name, created_at, updated_at
`

func (q *Queries) DeleteChallenge(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deleteChallenge, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChallenge = `-- name: GetChallenge :one
SELECT id, title, user_id, description, start_date, end_date, duration, active, created_at FROM challenges
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChallenge(ctx context.Context, id pgtype.UUID) (Challenge, error) {
	row := q.db.QueryRow(ctx, getChallenge, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Duration,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const listChallenges = `-- name: ListChallenges :many
SELECT id, title, user_id, description, start_date, end_date, duration, active, created_at FROM challenges
ORDER BY start_date
LIMIT $1
OFFSET $2
`

type ListChallengesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListChallenges(ctx context.Context, arg ListChallengesParams) ([]Challenge, error) {
	rows, err := q.db.Query(ctx, listChallenges, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Challenge
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Duration,
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChallenge = `-- name: UpdateChallenge :exec
UPDATE challenges
  set title = $2,
  description = $3, 
  end_date = $4, 
  duration = $5, 
  active = $6
WHERE id = $1
`

type UpdateChallengeParams struct {
	ID          pgtype.UUID `json:"id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	EndDate     pgtype.Date `json:"end_date"`
	Duration    pgtype.Int4 `json:"duration"`
	Active      pgtype.Bool `json:"active"`
}

func (q *Queries) UpdateChallenge(ctx context.Context, arg UpdateChallengeParams) error {
	_, err := q.db.Exec(ctx, updateChallenge,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.EndDate,
		arg.Duration,
		arg.Active,
	)
	return err
}
