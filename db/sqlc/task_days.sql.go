// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task_days.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaskDay = `-- name: CreateTaskDay :one
INSERT INTO task_days (
    user_id
) VALUES (
  $1
)
RETURNING id, user_id, date, count, total_duration, completed_duration
`

func (q *Queries) CreateTaskDay(ctx context.Context, userID pgtype.UUID) (TaskDay, error) {
	row := q.db.QueryRow(ctx, createTaskDay, userID)
	var i TaskDay
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Date,
		&i.Count,
		&i.TotalDuration,
		&i.CompletedDuration,
	)
	return i, err
}

const deleteTaskDay = `-- name: DeleteTaskDay :one
DELETE FROM task_days
WHERE id = $1
RETURNING id, user_id, date, count, total_duration, completed_duration
`

func (q *Queries) DeleteTaskDay(ctx context.Context, id pgtype.UUID) (TaskDay, error) {
	row := q.db.QueryRow(ctx, deleteTaskDay, id)
	var i TaskDay
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Date,
		&i.Count,
		&i.TotalDuration,
		&i.CompletedDuration,
	)
	return i, err
}

const getTaskDay = `-- name: GetTaskDay :one
SELECT id, user_id, date, count, total_duration, completed_duration FROM task_days
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskDay(ctx context.Context, id pgtype.UUID) (TaskDay, error) {
	row := q.db.QueryRow(ctx, getTaskDay, id)
	var i TaskDay
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Date,
		&i.Count,
		&i.TotalDuration,
		&i.CompletedDuration,
	)
	return i, err
}

const getTaskDayByDateAndUser = `-- name: GetTaskDayByDateAndUser :one
SELECT id, user_id, date, count, total_duration, completed_duration FROM task_days 
WHERE date = $1 
AND user_id = $2 
LIMIT 1
`

type GetTaskDayByDateAndUserParams struct {
	Date   pgtype.Date `json:"date"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetTaskDayByDateAndUser(ctx context.Context, arg GetTaskDayByDateAndUserParams) (TaskDay, error) {
	row := q.db.QueryRow(ctx, getTaskDayByDateAndUser, arg.Date, arg.UserID)
	var i TaskDay
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Date,
		&i.Count,
		&i.TotalDuration,
		&i.CompletedDuration,
	)
	return i, err
}

const listTaskDays = `-- name: ListTaskDays :many
SELECT id, user_id, date, count, total_duration, completed_duration FROM task_days
ORDER BY task_days.date
LIMIT $1
OFFSET $2
`

type ListTaskDaysParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTaskDays(ctx context.Context, arg ListTaskDaysParams) ([]TaskDay, error) {
	rows, err := q.db.Query(ctx, listTaskDays, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskDay{}
	for rows.Next() {
		var i TaskDay
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Date,
			&i.Count,
			&i.TotalDuration,
			&i.CompletedDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
