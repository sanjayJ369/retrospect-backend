// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	CreateChallenge(ctx context.Context, arg CreateChallengeParams) (Challenge, error)
	CreateChallengeEntry(ctx context.Context, challengeID pgtype.UUID) (ChallengeEntry, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error)
	CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error)
	CreateTaskDay(ctx context.Context, userID pgtype.UUID) (TaskDay, error)
	// Creates new task_day entries for all users in a given timezone for their "today".
	// The `(NOW() AT TIME ZONE $1)::date` correctly calculates the user's current date.
	CreateTaskDaysForUsersInTimezone(ctx context.Context, timezone pgtype.Interval) error
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteChallenge(ctx context.Context, id pgtype.UUID) (Challenge, error)
	DeleteChallengeEntry(ctx context.Context, id pgtype.UUID) (ChallengeEntry, error)
	DeleteTask(ctx context.Context, id pgtype.UUID) (Task, error)
	DeleteTaskDay(ctx context.Context, id pgtype.UUID) (TaskDay, error)
	DeleteUser(ctx context.Context, id pgtype.UUID) (User, error)
	GetChallenge(ctx context.Context, id pgtype.UUID) (Challenge, error)
	GetChallengeEntry(ctx context.Context, id pgtype.UUID) (ChallengeEntry, error)
	GetSessions(ctx context.Context, id pgtype.UUID) (Session, error)
	GetTask(ctx context.Context, id pgtype.UUID) (Task, error)
	GetTaskDay(ctx context.Context, id pgtype.UUID) (TaskDay, error)
	// Finds all distinct timezones where the current local time is at the beginning of a new day (e.g., 00:00 to 00:59).
	// We can then find all users for these timezones.
	GetTimezonesWhereDayIsStarting(ctx context.Context) ([]string, error)
	GetUser(ctx context.Context, id pgtype.UUID) (User, error)
	GetUserByEmail(ctx context.Context, email string) (User, error)
	GetUserByName(ctx context.Context, name string) (User, error)
	ListChallengeEntries(ctx context.Context, arg ListChallengeEntriesParams) ([]ChallengeEntry, error)
	ListChallengeEntriesByChallengeId(ctx context.Context, arg ListChallengeEntriesByChallengeIdParams) ([]ChallengeEntry, error)
	ListChallenges(ctx context.Context, arg ListChallengesParams) ([]Challenge, error)
	ListChallengesByUser(ctx context.Context, arg ListChallengesByUserParams) ([]Challenge, error)
	ListTaskDays(ctx context.Context, arg ListTaskDaysParams) ([]TaskDay, error)
	ListTaskDaysByUserId(ctx context.Context, arg ListTaskDaysByUserIdParams) ([]TaskDay, error)
	ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error)
	ListTasksByTaskDayId(ctx context.Context, taskDayID pgtype.UUID) ([]Task, error)
	ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error)
	UpdateChallengeActiveStatus(ctx context.Context, arg UpdateChallengeActiveStatusParams) (Challenge, error)
	UpdateChallengeDescription(ctx context.Context, arg UpdateChallengeDescriptionParams) (Challenge, error)
	// This query updates multiple common fields together
	UpdateChallengeDetails(ctx context.Context, arg UpdateChallengeDetailsParams) (Challenge, error)
	UpdateChallengeEndDate(ctx context.Context, arg UpdateChallengeEndDateParams) (Challenge, error)
	UpdateChallengeEntry(ctx context.Context, arg UpdateChallengeEntryParams) (ChallengeEntry, error)
	UpdateChallengeTitle(ctx context.Context, arg UpdateChallengeTitleParams) (Challenge, error)
	UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error)
	UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error)
	UpdateUserIsVerified(ctx context.Context, arg UpdateUserIsVerifiedParams) (User, error)
	UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error)
	UpdateUserTimezone(ctx context.Context, arg UpdateUserTimezoneParams) (User, error)
}

var _ Querier = (*Queries)(nil)
