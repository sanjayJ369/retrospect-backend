// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listTaskDaysByUserId = `-- name: ListTaskDaysByUserId :many
SELECT id, user_id, date, count, total_duration, completed_duration FROM task_days
WHERE user_id = $1
ORDER BY date
LIMIT $2
OFFSET $3
`

type ListTaskDaysByUserIdParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListTaskDaysByUserId(ctx context.Context, arg ListTaskDaysByUserIdParams) ([]TaskDay, error) {
	rows, err := q.db.Query(ctx, listTaskDaysByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskDay{}
	for rows.Next() {
		var i TaskDay
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Date,
			&i.Count,
			&i.TotalDuration,
			&i.CompletedDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByTaskDayId = `-- name: ListTasksByTaskDayId :many
SELECT id, task_day_id, title, description, duration, completed FROM tasks
WHERE task_day_id = $1
`

func (q *Queries) ListTasksByTaskDayId(ctx context.Context, taskDayID pgtype.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByTaskDayId, taskDayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TaskDayID,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
