// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    task_day_id, title, description, duration
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, task_day_id, title, description, duration, completed
`

type CreateTaskParams struct {
	TaskDayID   pgtype.UUID     `json:"task_day_id"`
	Title       string          `json:"title"`
	Description pgtype.Text     `json:"description"`
	Duration    pgtype.Interval `json:"duration"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.TaskDayID,
		arg.Title,
		arg.Description,
		arg.Duration,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskDayID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.Completed,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
DELETE FROM tasks
WHERE id = $1
RETURNING id, task_day_id, title, description, duration, completed
`

func (q *Queries) DeleteTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, deleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskDayID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.Completed,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, task_day_id, title, description, duration, completed FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskDayID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.Completed,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, task_day_id, title, description, duration, completed FROM tasks
ORDER BY title
LIMIT $1
OFFSET $2
`

type ListTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TaskDayID,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
  set title = $2,
  description = $3, 
  duration = $4, 
  completed = $5
WHERE id = $1
`

type UpdateTaskParams struct {
	ID          pgtype.UUID     `json:"id"`
	Title       string          `json:"title"`
	Description pgtype.Text     `json:"description"`
	Duration    pgtype.Interval `json:"duration"`
	Completed   pgtype.Bool     `json:"completed"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Duration,
		arg.Completed,
	)
	return err
}
